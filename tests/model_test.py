import model
from pathlib import Path
import numpy as np


def test_prepare_features():
    model_service = model.ModelService(None, None)

    rainfall = {
         "info": [
    16.6875, 16.6875, 16.675, 10.35625,
    69.08333333, 198.89583333, 0.51041667, 1.54166667,
    30.18020833, 28.31041667, 14.8875, 19.86875,
    21.10833333, 17.51458333, 17.48333333, 18.06666667,
    17.83958333, 14.8875, 19.86875, 21.09583333,
    17.51458333, 17.48333333, 18.0625, 17.83958333,
    15.04375, 18.68333333, 20.34375, 16.93125,
    16.50625, 17.62916667, 18.16458333, 10.95,
    7.45416667, 8.72083333, 8.59791667, 6.60833333,
    8.78125, 11.77708333, 77.89583333, 46.02083333,
    48.35416667, 58.64583333, 52.54166667, 58.4375,
    69.52083333, 273.35416667, 167.33333333, 236.58333333,
    133.10416667, 181.66666667, 213.0625, 92.875,
    0.48125, 2.03958333, 1.57291667, 0.84166667,
    0.60625, 0.56458333, 0.76458333, 1.625,
    5.2875, 3.70208333, 2.08541667, 1.58333333,
    1.65208333, 2.18958333, 30.18270833, 30.00541667,
    29.84958333, 29.98916667, 30.05708333, 30.02583333,
    30.14666667, 28.31354167, 28.136875, 27.980625,
    28.12041667, 28.18791667, 28.15729167, 28.2775,
    0.8, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0
  ],
  "event_id": 125
    }
        
    data = model_service.prepare_feature(rainfall["info"])
    assert data.shape == (1,87)
    
    
def read_text(file):
    text_directory = Path(__file__).parent
    with open(text_directory / file, "rt", encoding="utf-8") as f_in:
        return f_in.read().strip()



def test_base64_decode():
    base64_input = read_text("data.b64")
    actual_result = model.base64_decode(base64_input)

    expected_result = {
  "info": [
    16.6875, 16.6875, 16.675, 10.35625,
    69.08333333, 198.89583333, 0.51041667, 1.54166667,
    30.18020833, 28.31041667, 14.8875, 19.86875,
    21.10833333, 17.51458333, 17.48333333, 18.06666667,
    17.83958333, 14.8875, 19.86875, 21.09583333,
    17.51458333, 17.48333333, 18.0625, 17.83958333,
    15.04375, 18.68333333, 20.34375, 16.93125,
    16.50625, 17.62916667, 18.16458333, 10.95,
    7.45416667, 8.72083333, 8.59791667, 6.60833333,
    8.78125, 11.77708333, 77.89583333, 46.02083333,
    48.35416667, 58.64583333, 52.54166667, 58.4375,
    69.52083333, 273.35416667, 167.33333333, 236.58333333,
    133.10416667, 181.66666667, 213.0625, 92.875,
    0.48125, 2.03958333, 1.57291667, 0.84166667,
    0.60625, 0.56458333, 0.76458333, 1.625,
    5.2875, 3.70208333, 2.08541667, 1.58333333,
    1.65208333, 2.18958333, 30.18270833, 30.00541667,
    29.84958333, 29.98916667, 30.05708333, 30.02583333,
    30.14666667, 28.31354167, 28.136875, 27.980625,
    28.12041667, 28.18791667, 28.15729167, 28.2775,
    0.8, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0
  ],
  "event_id": 123
}

    assert actual_result == expected_result

class ModelMock:
    def __init__(self, value) -> None:
        self.value = value

    def predict(self, X):
        return 10.0



def test_predict():

  model_mock = ModelMock(10)
  model_version = "Test123"
  model_service = model.ModelService(model_mock, model_version=model_version)
  features = np.array([
  16.6875, 16.6875, 16.675, 10.35625,
  69.08333333, 198.89583333, 0.51041667, 1.54166667,
  30.18020833, 28.31041667, 14.8875, 19.86875,
  21.10833333, 17.51458333, 17.48333333, 18.06666667,
  17.83958333, 14.8875, 19.86875, 21.09583333,
  17.51458333, 17.48333333, 18.0625, 17.83958333,
  15.04375, 18.68333333, 20.34375, 16.93125,
  16.50625, 17.62916667, 18.16458333, 10.95,
  7.45416667, 8.72083333, 8.59791667, 6.60833333,
  8.78125, 11.77708333, 77.89583333, 46.02083333,
  48.35416667, 58.64583333, 52.54166667, 58.4375,
  69.52083333, 273.35416667, 167.33333333, 236.58333333,
  133.10416667, 181.66666667, 213.0625, 92.875,
  0.48125, 2.03958333, 1.57291667, 0.84166667,
  0.60625, 0.56458333, 0.76458333, 1.625,
  5.2875, 3.70208333, 2.08541667, 1.58333333,
  1.65208333, 2.18958333, 30.18270833, 30.00541667,
  29.84958333, 29.98916667, 30.05708333, 30.02583333,
  30.14666667, 28.31354167, 28.136875, 27.980625,
  28.12041667, 28.18791667, 28.15729167, 28.2775,
  0.8, 0.0, 0.0, 0.0,
  0.0, 0.0, 0.0
]).reshape(1,-1)

  actual_prediction = model_service.predict(features)
  expected_prediction = 10

  assert actual_prediction == expected_prediction




def test_lambda_handler():
    model_version = "Test123"
    model_mock = ModelMock(10)

    model_service = model.ModelService(model_mock, model_version)
    base64_input = read_text("data.b64")
    event = {
        "Records": [
            {
                "kinesis": {
                    "data": base64_input,
                },
            }
        ]
    }

    actual_prediction = model_service.lambda_handler(event)
    expected_prediction = {
        "predictions": [
            {
                'model': 'rainfall-prediction',
                "version": model_version,
                "prediction": {
                    'rainfall': 10.0,
                    'rainfall_history_id': actual_prediction["predictions"][0]["prediction"]["rainfall_history_id"]
                    
                },
            }
        ]
    }

    assert actual_prediction == expected_prediction